x-postgres-common: &postgres-common
  image: pgvector/pgvector:pg17
  restart: always
  healthcheck:
    test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
    interval: 10s
    timeout: 5s
    retries: 5
services:
  postgres:
    <<: *postgres-common
    container_name: pgvector-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      PGUSER: ${POSTGRES_USER}
      PGDATA: /var/lib/postgresql/data
    ports:
      - '25432:5432'
    volumes:
      - pgvector_primary:/var/lib/postgresql/data
      - ./init-primary.sql:/docker-entrypoint-initdb.d/init-primary.sql
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c shared_preload_libraries='pg_stat_statements' -c wal_level=logical -c max_wal_senders=3 -c max_replication_slots=3 -c hot_standby=on

  postgres-replica:
    <<: *postgres-common
    container_name: pgvector-replica
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PRIMARY_HOST: postgres
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replicator_pass}
      PGDATA: /var/lib/postgresql/data
    ports:
      - '25433:5432'
    volumes:
      - pgvector_replica:/var/lib/postgresql/data
      - ./init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    command: postgres -c shared_preload_libraries='pg_stat_statements' -c hot_standby=on -c max_standby_streaming_delay=30s
    depends_on:
      postgres:
        condition: service_healthy

  electric:
    image: docker.io/electricsql/electric:latest
    container_name: electric
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${AUDIT_DB}?sslmode=disable
      # Not suitable for production. Only use insecure mode in development or if you've otherwise secured the Electric API.
      # See https://electric-sql.com/docs/guides/security
      ELECTRIC_INSECURE: true
    #ports:
    #  - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy

networks:
  default:
    external: true
    name: nginx-proxy-manager_default

volumes:
  pgvector_primary:
    driver: local
  pgvector_replica:
    driver: local
